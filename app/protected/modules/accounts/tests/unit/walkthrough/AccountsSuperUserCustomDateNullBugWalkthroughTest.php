<?php    /*********************************************************************************     * Zurmo is a customer relationship management program developed by     * Zurmo, Inc. Copyright (C) 2012 Zurmo Inc.     *     * Zurmo is free software; you can redistribute it and/or modify it under     * the terms of the GNU General Public License version 3 as published by the     * Free Software Foundation with the addition of the following permission added     * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK     * IN WHICH THE COPYRIGHT IS OWNED BY ZURMO, ZURMO DISCLAIMS THE WARRANTY     * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.     *     * Zurmo is distributed in the hope that it will be useful, but WITHOUT     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS     * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more     * details.     *     * You should have received a copy of the GNU General Public License along with     * this program; if not, see http://www.gnu.org/licenses or write to the Free     * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA     * 02110-1301 USA.     *     * You can contact Zurmo, Inc. with a mailing address at 113 McHenry Road Suite 207,     * Buffalo Grove, IL 60089, USA. or at email address contact@zurmo.com.     ********************************************************************************/         /**    * Walkthrough test for the adding the Custom Date Field.    * test to check that we are able to clear the value of Date Field    */        class AccountsSuperUserCustomDateNullBugWalkthroughTest extends ZurmoWalkthroughBaseTest    {        public static function setUpBeforeClass()        {            parent::setUpBeforeClass();            SecurityTestHelper::createSuperAdmin();            $super                      = User::getByUsername('super');            Yii::app()->user->userModel = $super;            Currency::makeBaseCurrency();            //Create a account for testing            $account = AccountTestHelper::createAccountByNameForOwner('superAccount', $super);        }        public function testSuperUserAccountDefaultControllerActions()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');            //Default Controller actions requiring some sort of parameter via POST or GET            //Load Account Modules Menu.            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/modulesMenu');            //Load AttributesList for Account module.            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/attributesList');            //Load ModuleLayoutsList for Account module.            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/moduleLayoutsList');            //Load ModuleEdit view for each applicable module.            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/moduleEdit');            //Now validate save with failed validation.            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->setPostArray(array('ajax' => 'edit-form',                'AccountsModuleForm' => $this->createModuleEditBadValidationPostData()));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/moduleEdit');            //Now validate save with successful validation.            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->setPostArray(array('ajax' => 'edit-form',                'AccountsModuleForm' => $this->createModuleEditGoodValidationPostData('acc new name')));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/moduleEdit');            $this->assertEquals('[]', $content);            //Now save successfully.            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            $this->setPostArray(array('save' => 'Save',                'AccountsModuleForm' => $this->createModuleEditGoodValidationPostData('acc new name')));            $this->runControllerWithRedirectExceptionAndGetContent('designer/default/moduleEdit');            //Now confirm everything did in fact save correctly.            $this->assertEquals('Acc New Name',  AccountsModule::getModuleLabelByTypeAndLanguage('Singular'));            $this->assertEquals('Acc New Names', AccountsModule::getModuleLabelByTypeAndLanguage('Plural'));            $this->assertEquals('acc new name',  AccountsModule::getModuleLabelByTypeAndLanguage('SingularLowerCase'));            $this->assertEquals('acc new names', AccountsModule::getModuleLabelByTypeAndLanguage('PluralLowerCase'));            //Load LayoutEdit for each applicable module and applicable layout            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountEditAndDetailsView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsListView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsMassEditView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsModalListView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsModalSearchView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsRelatedListView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsSearchView'));            $this->runControllerWithNoExceptionsAndGetContent('designer/default/LayoutEdit');        }        /**         * @depends testSuperUserAccountDefaultControllerActions         */        public function testSuperUserCustomFieldsWalkthroughForAccountsModule()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');            //Test create field list.            $this->resetPostArray();            $this->setGetArray(array('moduleClassName' => 'AccountsModule'));            //View creation screen, then create custom field for each custom field type.            $this->createCheckBoxCustomFieldByModule            ('AccountsModule', 'checkbox');            $this->createCurrencyValueCustomFieldByModule       ('AccountsModule', 'currency');            $this->createDateCustomFieldByModule                ('AccountsModule', 'date');            $this->createDateTimeCustomFieldByModule            ('AccountsModule', 'datetime');            $this->createDecimalCustomFieldByModule             ('AccountsModule', 'decimal');            $this->createDropDownCustomFieldByModule            ('AccountsModule', 'picklist');            $this->createDependentDropDownCustomFieldByModule   ('AccountsModule', 'countrylist');            $this->createDependentDropDownCustomFieldByModule   ('AccountsModule', 'statelist');            $this->createDependentDropDownCustomFieldByModule   ('AccountsModule', 'citylist');            $this->createMultiSelectDropDownCustomFieldByModule ('AccountsModule', 'multiselect');            $this->createTagCloudCustomFieldByModule            ('AccountsModule', 'tagcloud');            $this->createCalculatedNumberCustomFieldByModule    ('AccountsModule', 'calcnumber');            $this->createDropDownDependencyCustomFieldByModule  ('AccountsModule', 'dropdowndep');            $this->createDropDownDependencyCustomFieldByModule  ('AccountsModule', 'dropdowndep2');            $this->createIntegerCustomFieldByModule             ('AccountsModule', 'integer');            $this->createPhoneCustomFieldByModule               ('AccountsModule', 'phone');            $this->createRadioDropDownCustomFieldByModule       ('AccountsModule', 'radio');            $this->createTextCustomFieldByModule                ('AccountsModule', 'text');            $this->createTextAreaCustomFieldByModule            ('AccountsModule', 'textarea');            $this->createUrlCustomFieldByModule                 ('AccountsModule', 'url');        }        /**         * @depends testSuperUserCustomFieldsWalkthroughForAccountsModule         */        public function testSuperUserAddCustomFieldsToLayoutsForAccountsModule()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');            //Add custom fields to AccountEditAndDetailsView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountEditAndDetailsView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountEditAndDetailsViewLayoutWithAllCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout,                                      'LayoutPanelsTypeForm' => array('type' => FormLayout::PANELS_DISPLAY_TYPE_ALL)));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsSearchView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsSearchView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsSearchViewLayoutWithAllCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsModalSearchView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsModalSearchView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsSearchViewLayoutWithAllCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsListView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsListView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsListViewLayoutWithAllStandardAndCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsRelatedListView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsRelatedListView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsListViewLayoutWithAllStandardAndCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsModalListView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsModalListView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsListViewLayoutWithAllStandardAndCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);            //Add all fields to AccountsMassEditView.            $this->setGetArray(array('moduleClassName' => 'AccountsModule',                                     'viewClassName'   => 'AccountsMassEditView'));            $layout = AccountsDesignerWalkthroughHelperUtil::getAccountsMassEditViewLayoutWithAllStandardAndCustomFieldsPlaced();            $this->setPostArray(array('save'  => 'Save', 'layout' => $layout));            $content = $this->runControllerWithExitExceptionAndGetContent('designer/default/LayoutEdit');            $this->assertFalse(strpos($content, 'Layout saved successfully') === false);        }        /**         * @depends testSuperUserAddCustomFieldsToLayoutsForAccountsModule         */        public function testLayoutsLoadOkAfterCustomFieldsPlacedForAccountsModule()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');            $superAccountId = self::getModelIdByModelNameAndName ('Account', 'superAccount');            //Load create, edit, and details views.            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/create');            $this->setGetArray(array('id' => $superAccountId));            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/edit');            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/details');            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/list');            $this->setGetArray(array(                'modalTransferInformation' => array('sourceIdFieldId' => 'x', 'sourceNameFieldId' => 'y')            ));            $this->resetPostArray();            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/modalList');            $this->setGetArray(array('selectAll' => '1'));            $this->resetPostArray();            $this->runControllerWithNoExceptionsAndGetContent('accounts/default/massEdit');            //todo: test related list once the related list is available in a sub view.        }                public function testSuperUserAccountCustomDateFieldAddition()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');                        $date           = Yii::app()->dateFormatter->format(DateTimeUtil::getLocaleDateFormat(), time());            $dateAssert     = date('Y-m-d');            //Create a new account based with the custom field date.            $this->resetGetArray();            $this->setPostArray(array('Account' => array(                                    'name'                                  => 'myNewAccount',                                    'officePhone'                           => '259-784-2169',                                    'industry'                              => array('value' => 'Automotive'),                                    'officeFax'                             => '299-845-7863',                                    'employees'                             => '930',                                    'annualRevenue'                         => '474000000',                                    'type'                                  => array('value' => 'Prospect'),                                    'website'                               => 'http://www.Unnamed.com',                                    'primaryEmail'                          => array('emailAddress' => 'info@myNewAccount.com',                                                                                  'optOut' => '1',                                                                                  'isInvalid' => '0'),                                    'secondaryEmail'                        => array('emailAddress' => '',                                                                                  'optOut' => '0',                                                                                  'isInvalid' => '0'),                                    'billingAddress'                        => array('street1' => '6466 South Madison Creek',                                                                                  'street2' => '',                                                                                  'city' => 'Chicago',                                                                                  'state' => 'IL',                                                                                  'postalCode' => '60652',                                                                                  'country' => 'USA'),                                    'shippingAddress'                       => array('street1' => '27054 West Michigan Lane',                                                                                  'street2' => '',                                                                                  'city' => 'Austin',                                                                                  'state' => 'TX',                                                                                  'postalCode' => '78759',                                                                                  'country' => 'USA'),                                    'description'                           => 'This is a Description',                                    'explicitReadWriteModelPermissions'     => array('type' => null),                                    'dateCstm'                              => '1/1/2013'                                    )));            $this->runControllerWithRedirectExceptionAndGetUrl('accounts/default/create');                        $account        = Account::getByName('myNewAccount');            $accountId      = $account[0]->id;                    }                public function testSuperUserAccountCustomDateFieldBug()        {            $super = $this->logoutCurrentUserLoginNewUserAndGetByUsername('super');            //Get the account id from the recently created account.            $account        = Account::getByName('myNewAccount');            $accountId      = $account[0]->id;            //Edit and save the account.            $this->setGetArray(array('id' => $accountId));            $this->setPostArray(array('Account' => array(                                    'name'                                  => 'myNewAccount',                                    'officePhone'                           => '259-784-2169',                                    'industry'                              => array('value' => 'Automotive'),                                    'officeFax'                             => '299-845-7863',                                    'employees'                             => '930',                                    'annualRevenue'                         => '474000000',                                    'type'                                  => array('value' => 'Prospect'),                                    'website'                               => 'http://www.Unnamed.com',                                    'primaryEmail'                          => array('emailAddress' => 'info@myNewAccount.com',                                                                                  'optOut' => '1',                                                                                  'isInvalid' => '0'),                                    'secondaryEmail'                        => array('emailAddress' => '',                                                                                  'optOut' => '0',                                                                                  'isInvalid' => '0'),                                    'billingAddress'                        => array('street1' => '6466 South Madison Creek',                                                                                  'street2' => '',                                                                                  'city' => 'Chicago',                                                                                  'state' => 'IL',                                                                                  'postalCode' => '60652',                                                                                  'country' => 'USA'),                                    'shippingAddress'                       => array('street1' => '27054 West Michigan Lane',                                                                                  'street2' => '',                                                                                  'city' => 'Austin',                                                                                  'state' => 'TX',                                                                                  'postalCode' => '78759',                                                                                  'country' => 'USA'),                                    'description'                           => 'This is a Description',                                    'explicitReadWriteModelPermissions'     => array('type' => null),                                    'dateCstm'                              => ''                                    )));            $this->runControllerWithRedirectExceptionAndGetUrl('accounts/default/edit');            $account        = Account::getByName('myNewAccount');            echo $accountId      = $account[0]->dateCstm;        }    }?>    